{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "                             PROJECT 2: MARCH MADNESS FIRST ROUND PREDICTIONS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import Libraries and Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('fivethirtyeight')\n",
    "\n",
    "%matplotlib inline\n",
    "%config InlineBackend.figure_format = 'retina'\n",
    "\n",
    "import altair as alt\n",
    "alt.renderers.enable('notebook')\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression, LinearRegression\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, RandomizedSearchCV\n",
    "from sklearn.preprocessing import LabelBinarizer, StandardScaler\n",
    "from sklearn.pipeline import Pipeline, make_pipeline\n",
    "from sklearn_pandas import DataFrameMapper\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn import metrics \n",
    "from sklearn.metrics import recall_score, make_scorer, f1_score\n",
    "from sklearn.feature_selection import f_classif, f_regression, chi2, SelectPercentile\n",
    "from sklearn.feature_selection import RFE, SelectKBest\n",
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "reg_season = pd.read_csv('data/regular_season.csv')\n",
    "march_madness = pd.read_csv('data/march_madness.csv')\n",
    "march_madness_seeds = pd.read_csv('data/march_madness_seeds.csv')\n",
    "teams_info = pd.read_csv('data/teams.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "teams = teams_info.drop(columns='conference_code')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>team_id</th>\n",
       "      <th>team_name</th>\n",
       "      <th>conference_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>125636</th>\n",
       "      <td>2014</td>\n",
       "      <td>1464</td>\n",
       "      <td>Youngstown St</td>\n",
       "      <td>Horizon League</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125637</th>\n",
       "      <td>2015</td>\n",
       "      <td>1464</td>\n",
       "      <td>Youngstown St</td>\n",
       "      <td>Horizon League</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125638</th>\n",
       "      <td>2016</td>\n",
       "      <td>1464</td>\n",
       "      <td>Youngstown St</td>\n",
       "      <td>Horizon League</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125639</th>\n",
       "      <td>2017</td>\n",
       "      <td>1464</td>\n",
       "      <td>Youngstown St</td>\n",
       "      <td>Horizon League</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125640</th>\n",
       "      <td>2018</td>\n",
       "      <td>1464</td>\n",
       "      <td>Youngstown St</td>\n",
       "      <td>Horizon League</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        season  team_id      team_name conference_name\n",
       "125636    2014     1464  Youngstown St  Horizon League\n",
       "125637    2015     1464  Youngstown St  Horizon League\n",
       "125638    2016     1464  Youngstown St  Horizon League\n",
       "125639    2017     1464  Youngstown St  Horizon League\n",
       "125640    2018     1464  Youngstown St  Horizon League"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "teams.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>seed</th>\n",
       "      <th>team_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2003</td>\n",
       "      <td>W01</td>\n",
       "      <td>1328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2003</td>\n",
       "      <td>W02</td>\n",
       "      <td>1448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2003</td>\n",
       "      <td>W03</td>\n",
       "      <td>1393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2003</td>\n",
       "      <td>W04</td>\n",
       "      <td>1257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2003</td>\n",
       "      <td>W05</td>\n",
       "      <td>1280</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   season seed  team_id\n",
       "0    2003  W01     1328\n",
       "1    2003  W02     1448\n",
       "2    2003  W03     1393\n",
       "3    2003  W04     1257\n",
       "4    2003  W05     1280"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "march_madness_seeds.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "og_march_madness = march_madness.iloc[:1136, :]\n",
    "march_madness = march_madness.iloc[1136:, :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "floor = march_madness['day_in_season'] == 136\n",
    "ceiling = march_madness['day_in_season'] == 137\n",
    "\n",
    "march_madness_round1 = march_madness[floor | ceiling]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = march_madness_round1.drop(columns=['winning_team_score', 'losing_team_id', 'losing_team_score'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2017    32\n",
       "2016    32\n",
       "2015    32\n",
       "2014    32\n",
       "2013    32\n",
       "2012    32\n",
       "2011    32\n",
       "2010    32\n",
       "2009    32\n",
       "2008    32\n",
       "2007    32\n",
       "2006    32\n",
       "2005    32\n",
       "2004    32\n",
       "2003    32\n",
       "Name: season, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1['season'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "01    60\n",
       "02    56\n",
       "03    52\n",
       "04    49\n",
       "07    38\n",
       "05    36\n",
       "06    34\n",
       "08    34\n",
       "09    26\n",
       "11    26\n",
       "12    24\n",
       "10    22\n",
       "13    11\n",
       "14     8\n",
       "15     4\n",
       "Name: seed, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.set_option('display.max_columns', 500)\n",
    "df2 = pd.merge(df1, march_madness_seeds, left_on=['season', 'winning_team_id'], right_on=['season', 'team_id'])\n",
    "df2['seed'] = df2.seed.apply(lambda x: x.strip('ZWXYb'))\n",
    "#stripping the region from the seed. also stripping b from the one team that was 11b because that b just denotes they\n",
    "#had to play in the first four to gain their seed\n",
    "df2['seed'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_of_wins = df2['seed'].value_counts()\n",
    "num_of_wins = pd.DataFrame(num_of_wins)\n",
    "num_of_wins = num_of_wins.sort_index()\n",
    "num_of_wins = num_of_wins.rename(columns={'seed': 'number_of_wins'})\n",
    "num_of_wins['seed'] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n",
    "num_of_wins = num_of_wins.append({'number_of_wins': 0, 'seed': 16}, ignore_index=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>number_of_wins</th>\n",
       "      <th>seed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>60</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>56</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>52</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>49</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>36</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>34</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>38</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>34</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>26</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>22</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>26</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>24</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>11</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>8</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>4</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    number_of_wins  seed\n",
       "0               60     1\n",
       "1               56     2\n",
       "2               52     3\n",
       "3               49     4\n",
       "4               36     5\n",
       "5               34     6\n",
       "6               38     7\n",
       "7               34     8\n",
       "8               26     9\n",
       "9               22    10\n",
       "10              26    11\n",
       "11              24    12\n",
       "12              11    13\n",
       "13               8    14\n",
       "14               4    15\n",
       "15               0    16"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "num_of_wins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "var spec = {\"config\": {\"view\": {\"width\": 400, \"height\": 300}}, \"layer\": [{\"data\": {\"name\": \"data-795a29d1af54c848879dede2a5712db1\"}, \"mark\": \"bar\", \"encoding\": {\"x\": {\"type\": \"ordinal\", \"field\": \"seed\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"number_of_wins\"}}}, {\"data\": {\"name\": \"data-795a29d1af54c848879dede2a5712db1\"}, \"mark\": {\"type\": \"rule\", \"color\": \"red\"}, \"encoding\": {\"y\": {\"type\": \"quantitative\", \"aggregate\": \"median\", \"field\": \"number_of_wins\"}}}], \"width\": 800, \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.6.0.json\", \"datasets\": {\"data-795a29d1af54c848879dede2a5712db1\": [{\"number_of_wins\": 60, \"seed\": 1}, {\"number_of_wins\": 56, \"seed\": 2}, {\"number_of_wins\": 52, \"seed\": 3}, {\"number_of_wins\": 49, \"seed\": 4}, {\"number_of_wins\": 36, \"seed\": 5}, {\"number_of_wins\": 34, \"seed\": 6}, {\"number_of_wins\": 38, \"seed\": 7}, {\"number_of_wins\": 34, \"seed\": 8}, {\"number_of_wins\": 26, \"seed\": 9}, {\"number_of_wins\": 22, \"seed\": 10}, {\"number_of_wins\": 26, \"seed\": 11}, {\"number_of_wins\": 24, \"seed\": 12}, {\"number_of_wins\": 11, \"seed\": 13}, {\"number_of_wins\": 8, \"seed\": 14}, {\"number_of_wins\": 4, \"seed\": 15}, {\"number_of_wins\": 0, \"seed\": 16}]}};\n",
       "var opt = {};\n",
       "var type = \"vega-lite\";\n",
       "var id = \"e7f5a71b-1419-4a0b-a60b-a8beb3aaf5b1\";\n",
       "\n",
       "var output_area = this;\n",
       "\n",
       "require([\"nbextensions/jupyter-vega/index\"], function(vega) {\n",
       "  var target = document.createElement(\"div\");\n",
       "  target.id = id;\n",
       "  target.className = \"vega-embed\";\n",
       "\n",
       "  var style = document.createElement(\"style\");\n",
       "  style.textContent = [\n",
       "    \".vega-embed .error p {\",\n",
       "    \"  color: firebrick;\",\n",
       "    \"  font-size: 14px;\",\n",
       "    \"}\",\n",
       "  ].join(\"\\\\n\");\n",
       "\n",
       "  // element is a jQuery wrapped DOM element inside the output area\n",
       "  // see http://ipython.readthedocs.io/en/stable/api/generated/\\\n",
       "  // IPython.display.html#IPython.display.Javascript.__init__\n",
       "  element[0].appendChild(target);\n",
       "  element[0].appendChild(style);\n",
       "\n",
       "  vega.render(\"#\" + id, spec, type, opt, output_area);\n",
       "}, function (err) {\n",
       "  if (err.requireType !== \"scripterror\") {\n",
       "    throw(err);\n",
       "  }\n",
       "});\n"
      ],
      "text/plain": [
       "<vega.vegalite.VegaLite at 0x106822a20>"
      ]
     },
     "metadata": {
      "jupyter-vega": "#e7f5a71b-1419-4a0b-a60b-a8beb3aaf5b1"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": ""
     },
     "metadata": {
      "jupyter-vega": "#e7f5a71b-1419-4a0b-a60b-a8beb3aaf5b1"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bar = alt.Chart(num_of_wins).mark_bar().encode(\n",
    "    x='seed:O',\n",
    "    y=\"number_of_wins:Q\"\n",
    ")\n",
    "\n",
    "line = alt.Chart(num_of_wins).mark_rule(color='red').encode(\n",
    "    y='median(number_of_wins)'\n",
    "    \n",
    ")\n",
    "    \n",
    "(bar + line).properties(width=800)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "This bar chart shows that when predicting the first round of March Madness, there's a very high probability that those colleges seated 1, 2, 3, and 4 will win, and their opponents, seats 13, 14, 15, 16, will lose. Teams seeded between 5 and 12, are more evenly matched, and as you can see, those 8 seeds have numbers closer to 30 (30 wins indicating that a seed won half of the games they played).\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>day_in_season</th>\n",
       "      <th>winning_team_id</th>\n",
       "      <th>winning_team_score</th>\n",
       "      <th>losing_team_id</th>\n",
       "      <th>losing_team_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1137</th>\n",
       "      <td>2003</td>\n",
       "      <td>136</td>\n",
       "      <td>1112</td>\n",
       "      <td>80</td>\n",
       "      <td>1436</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1138</th>\n",
       "      <td>2003</td>\n",
       "      <td>136</td>\n",
       "      <td>1113</td>\n",
       "      <td>84</td>\n",
       "      <td>1272</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1139</th>\n",
       "      <td>2003</td>\n",
       "      <td>136</td>\n",
       "      <td>1141</td>\n",
       "      <td>79</td>\n",
       "      <td>1166</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1140</th>\n",
       "      <td>2003</td>\n",
       "      <td>136</td>\n",
       "      <td>1143</td>\n",
       "      <td>76</td>\n",
       "      <td>1301</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1141</th>\n",
       "      <td>2003</td>\n",
       "      <td>136</td>\n",
       "      <td>1163</td>\n",
       "      <td>58</td>\n",
       "      <td>1140</td>\n",
       "      <td>53</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      season  day_in_season  winning_team_id  winning_team_score  \\\n",
       "1137    2003            136             1112                  80   \n",
       "1138    2003            136             1113                  84   \n",
       "1139    2003            136             1141                  79   \n",
       "1140    2003            136             1143                  76   \n",
       "1141    2003            136             1163                  58   \n",
       "\n",
       "      losing_team_id  losing_team_score  \n",
       "1137            1436                 51  \n",
       "1138            1272                 71  \n",
       "1139            1166                 73  \n",
       "1140            1301                 74  \n",
       "1141            1140                 53  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "march_madness_round1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>seed</th>\n",
       "      <th>team_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2003</td>\n",
       "      <td>01</td>\n",
       "      <td>1328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2003</td>\n",
       "      <td>02</td>\n",
       "      <td>1448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2003</td>\n",
       "      <td>03</td>\n",
       "      <td>1393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2003</td>\n",
       "      <td>04</td>\n",
       "      <td>1257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2003</td>\n",
       "      <td>05</td>\n",
       "      <td>1280</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   season seed  team_id\n",
       "0    2003   01     1328\n",
       "1    2003   02     1448\n",
       "2    2003   03     1393\n",
       "3    2003   04     1257\n",
       "4    2003   05     1280"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "march_madness_seeds['seed'] = march_madness_seeds.seed.apply(lambda x: x.strip('WXYZba')) #strips the regions (WXYZ) and a and b from play-in teams\n",
    "df3_march_madness_seeds = march_madness_seeds\n",
    "df3_march_madness_seeds.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3_march_madness_seeds['seed'] = pd.to_numeric(df3_march_madness_seeds['seed'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>winning_team_id</th>\n",
       "      <th>losing_team_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1137</th>\n",
       "      <td>2003</td>\n",
       "      <td>1112</td>\n",
       "      <td>1436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1138</th>\n",
       "      <td>2003</td>\n",
       "      <td>1113</td>\n",
       "      <td>1272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1139</th>\n",
       "      <td>2003</td>\n",
       "      <td>1141</td>\n",
       "      <td>1166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1140</th>\n",
       "      <td>2003</td>\n",
       "      <td>1143</td>\n",
       "      <td>1301</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1141</th>\n",
       "      <td>2003</td>\n",
       "      <td>1163</td>\n",
       "      <td>1140</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      season  winning_team_id  losing_team_id\n",
       "1137    2003             1112            1436\n",
       "1138    2003             1113            1272\n",
       "1139    2003             1141            1166\n",
       "1140    2003             1143            1301\n",
       "1141    2003             1163            1140"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3_march_madness_round1 = march_madness_round1.drop(columns=['day_in_season', 'winning_team_score', 'losing_team_score'])\n",
    "df3_march_madness_round1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3_march_madness_round1.columns = ['season', 'team_id', 'losing_team_id']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3 = pd.merge(df3_march_madness_round1, march_madness_seeds, left_on=['season', 'team_id'], right_on=['season', 'team_id'])\n",
    "df3 = df3[['season', 'team_id', 'seed', 'losing_team_id']]\n",
    "df3.columns = ['season', 'winning_team_id', 'w_seed', 'team_id']\n",
    "df3 = pd.merge(df3, march_madness_seeds, left_on=['season', 'team_id'], right_on=['season', 'team_id'])\n",
    "df3.columns =['season', 'winning_team_id', 'w_seed', 'losing_team_id', 'l_seed']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>winning_team_id</th>\n",
       "      <th>w_seed</th>\n",
       "      <th>losing_team_id</th>\n",
       "      <th>l_seed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2003</td>\n",
       "      <td>1112</td>\n",
       "      <td>1</td>\n",
       "      <td>1436</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2003</td>\n",
       "      <td>1113</td>\n",
       "      <td>10</td>\n",
       "      <td>1272</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2003</td>\n",
       "      <td>1141</td>\n",
       "      <td>11</td>\n",
       "      <td>1166</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2003</td>\n",
       "      <td>1143</td>\n",
       "      <td>8</td>\n",
       "      <td>1301</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2003</td>\n",
       "      <td>1163</td>\n",
       "      <td>5</td>\n",
       "      <td>1140</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   season  winning_team_id  w_seed  losing_team_id  l_seed\n",
       "0    2003             1112       1            1436      16\n",
       "1    2003             1113      10            1272       7\n",
       "2    2003             1141      11            1166       6\n",
       "3    2003             1143       8            1301       9\n",
       "4    2003             1163       5            1140      12"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3_march_madness_seeds\n",
    "\n",
    "dfA = df3.iloc[:, :3]\n",
    "dfB = df3.iloc[:, 3:]\n",
    "\n",
    "dfB['season'] = dfA.season"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>losing_team_id</th>\n",
       "      <th>l_seed</th>\n",
       "      <th>season</th>\n",
       "      <th>outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1436</td>\n",
       "      <td>16</td>\n",
       "      <td>2003</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1272</td>\n",
       "      <td>7</td>\n",
       "      <td>2003</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1166</td>\n",
       "      <td>6</td>\n",
       "      <td>2003</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1301</td>\n",
       "      <td>9</td>\n",
       "      <td>2003</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1140</td>\n",
       "      <td>12</td>\n",
       "      <td>2003</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   losing_team_id  l_seed  season  outcome\n",
       "0            1436      16    2003        0\n",
       "1            1272       7    2003        0\n",
       "2            1166       6    2003        0\n",
       "3            1301       9    2003        0\n",
       "4            1140      12    2003        0"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfA['outcome'] = 1\n",
    "dfB['outcome'] = 0\n",
    "dfB.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "dfA.columns = ['season', 'team_id', 'seed', 'outcome']\n",
    "dfB.columns = ['team_id', 'seed', 'season', 'outcome']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/pandas/core/frame.py:6692: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\n",
      "of pandas will change to not sort by default.\n",
      "\n",
      "To accept the future behavior, pass 'sort=False'.\n",
      "\n",
      "To retain the current behavior and silence the warning, pass 'sort=True'.\n",
      "\n",
      "  sort=sort)\n"
     ]
    }
   ],
   "source": [
    "dfC = dfA.append(dfB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>outcome</th>\n",
       "      <th>season</th>\n",
       "      <th>seed</th>\n",
       "      <th>team_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2003</td>\n",
       "      <td>1</td>\n",
       "      <td>1112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2003</td>\n",
       "      <td>10</td>\n",
       "      <td>1113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>2003</td>\n",
       "      <td>11</td>\n",
       "      <td>1141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>2003</td>\n",
       "      <td>8</td>\n",
       "      <td>1143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>2003</td>\n",
       "      <td>5</td>\n",
       "      <td>1163</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   outcome  season  seed  team_id\n",
       "0        1    2003     1     1112\n",
       "1        1    2003    10     1113\n",
       "2        1    2003    11     1141\n",
       "3        1    2003     8     1143\n",
       "4        1    2003     5     1163"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfC.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "round_one_results = pd.merge(march_madness_seeds, dfC, left_on=['season', 'team_id', 'seed'], right_on=['season', 'team_id', 'seed'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(round_one_results[['seed']], round_one_results[['outcome']], test_size=.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:761: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.74609375"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = LogisticRegression(solver='lbfgs')\n",
    "model.fit(X_train, y_train)\n",
    "model.score(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7552083333333334"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.score(X_test, y_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "This naive model shows exacly what one would expect. Probabilities for teams seeded in the top 4 are closer to 100% winning, and those in the bottom 4, approaching 0%. Combined with the 8 middle seeds being more evenly matched and probabilites in closer proximity to 50%, we would expect a model based solely on seeding to be around 75%.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conference Information"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "Next, I am going to introduce information based on conferences. The significance of this feature is that some conferences are more competitive than others. For example, The Atlantic Coast Conference has University of North Carolina, Duke, and Virginia, among other competitive schools. The Big Ten has Indiana, Illinois, and Purdue. Members of these conferences may not have win records as strong as teams in less competitive conferences, who do not face as high of a calibre opponents during the regular season. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "teams = teams.drop_duplicates()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "teams = teams.drop(columns=['team_name'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "round_one_results = pd.merge(round_one_results, teams, left_on=['season', 'team_id'], right_on=['season','team_id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>seed</th>\n",
       "      <th>team_id</th>\n",
       "      <th>outcome</th>\n",
       "      <th>conference_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2003</td>\n",
       "      <td>1</td>\n",
       "      <td>1328</td>\n",
       "      <td>1</td>\n",
       "      <td>Big 12 Conference</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2003</td>\n",
       "      <td>2</td>\n",
       "      <td>1448</td>\n",
       "      <td>1</td>\n",
       "      <td>Atlantic Coast Conference</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2003</td>\n",
       "      <td>3</td>\n",
       "      <td>1393</td>\n",
       "      <td>1</td>\n",
       "      <td>Big East Conference</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   season  seed  team_id  outcome            conference_name\n",
       "0    2003     1     1328        1          Big 12 Conference\n",
       "1    2003     2     1448        1  Atlantic Coast Conference\n",
       "2    2003     3     1393        1        Big East Conference"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined_data = round_one_results\n",
    "combined_data.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "lb = LabelBinarizer() #using label binarizer to one hot encode conference columns\n",
    "lb.fit_transform(combined_data['conference_name'])\n",
    "\n",
    "combined_data = combined_data.join(\n",
    "    pd.DataFrame(lb.fit_transform(combined_data['conference_name']),\n",
    "    columns=lb.classes_, \n",
    "    index=combined_data.index)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "combined_data = combined_data.drop(columns=['conference_name'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "features = [columns for columns in combined_data if columns != 'outcome']\n",
    "\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(combined_data[features], combined_data['outcome'], \n",
    "                                                    test_size=.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7434895833333334"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = LogisticRegression(solver='lbfgs')\n",
    "model.fit(X_train, y_train)\n",
    "model.score(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7604166666666666"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Adding the conferences information in to the data actually did not make much impact. The original model scored a .746 on the training data and a .755 on the test data.\n",
    "The updated dataset with the conference in addition to the seeds scored .743 on the training data, and a .76 on the test data.\n",
    "I think that this is indicative of the fact that the NCAA does a great job at factoring season performance based on conferences into seeding. A team like Louisville or Syracuse (Atlantic Coast Conference) may not have a winning record that is comparable to those teams similiarly seeded, but they play in a conference with the teams that are consistently ranked 1 and 2. \n",
    "\n",
    "\n",
    "I assume that conference information would become more relelvant when looking at predictions for later rounds.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# INCORPORATING REGULAR SEASON STATS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "In the data_prep notebook, I organized and cleaned regular season data for the seasons associated with the March Madness data used above. The information that is being imported is separted by team and year and includes:\n",
    "                \n",
    "                -Wins (number of wins per season)\n",
    "                -Plus Minus (accumulation of plus and minus over the entire season)\n",
    "                -Three Point Average (Average of 3 point percentage per game)\n",
    "                -Free Throw Attempts (Average of free throw attempts per game)\n",
    "                -Offensive Rebounds (Average of offensive rebounds per game)\n",
    "                -Turnovers per Game (Average of turnovers per game)\n",
    "                -Field Goals Average (Average of field goals percentage per game)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "season_stats = pd.read_csv('data/season_stats_cleaned.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5130, 10)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "season_stats.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "season_stats = season_stats.drop(columns=['Unnamed: 0'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5130, 9)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "season_stats.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.merge(combined_data, season_stats, left_on=['season', 'team_id'], right_on=['season', 'team_id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>season</th>\n",
       "      <th>seed</th>\n",
       "      <th>team_id</th>\n",
       "      <th>outcome</th>\n",
       "      <th>America East Conference</th>\n",
       "      <th>American Athletic Conference</th>\n",
       "      <th>Atlantic 10 Conference</th>\n",
       "      <th>Atlantic Coast Conference</th>\n",
       "      <th>Atlantic Sun Conference</th>\n",
       "      <th>Big 12 Conference</th>\n",
       "      <th>Big East Conference</th>\n",
       "      <th>Big Sky Conference</th>\n",
       "      <th>Big South Conference</th>\n",
       "      <th>Big Ten Conference</th>\n",
       "      <th>Big West Conference</th>\n",
       "      <th>Colonial Athletic Association</th>\n",
       "      <th>Conference USA</th>\n",
       "      <th>Horizon League</th>\n",
       "      <th>Ivy League</th>\n",
       "      <th>Metro Atlantic Athletic Conference</th>\n",
       "      <th>Mid-American Conference</th>\n",
       "      <th>Mid-Continent Conference</th>\n",
       "      <th>Mid-Eastern Athletic Conference</th>\n",
       "      <th>Missouri Valley Conference</th>\n",
       "      <th>Mountain West Conference</th>\n",
       "      <th>Northeast Conference</th>\n",
       "      <th>Ohio Valley Conference</th>\n",
       "      <th>Pacific-10 Conference</th>\n",
       "      <th>Pacific-12 Conference</th>\n",
       "      <th>Patriot League</th>\n",
       "      <th>Southeastern Conference</th>\n",
       "      <th>Southern Conference</th>\n",
       "      <th>Southland Conference</th>\n",
       "      <th>Southwest Athletic Conference</th>\n",
       "      <th>Summit League</th>\n",
       "      <th>Sun Belt Conference</th>\n",
       "      <th>West Coast Conference</th>\n",
       "      <th>Western Athletic Conference</th>\n",
       "      <th>wins</th>\n",
       "      <th>plus_minus</th>\n",
       "      <th>three_point_avg</th>\n",
       "      <th>ft_attempts_pergame</th>\n",
       "      <th>off_rebounds_pergame</th>\n",
       "      <th>turnovers_pergame</th>\n",
       "      <th>field_goals_avg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2003</td>\n",
       "      <td>1</td>\n",
       "      <td>1328</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>330</td>\n",
       "      <td>0.391225</td>\n",
       "      <td>18.600000</td>\n",
       "      <td>12.133333</td>\n",
       "      <td>11.800000</td>\n",
       "      <td>0.446221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2003</td>\n",
       "      <td>2</td>\n",
       "      <td>1448</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>313</td>\n",
       "      <td>0.341486</td>\n",
       "      <td>26.620690</td>\n",
       "      <td>14.758621</td>\n",
       "      <td>15.103448</td>\n",
       "      <td>0.457965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2003</td>\n",
       "      <td>3</td>\n",
       "      <td>1393</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>296</td>\n",
       "      <td>0.339134</td>\n",
       "      <td>23.620690</td>\n",
       "      <td>14.310345</td>\n",
       "      <td>13.620690</td>\n",
       "      <td>0.472113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2003</td>\n",
       "      <td>4</td>\n",
       "      <td>1257</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>401</td>\n",
       "      <td>0.359227</td>\n",
       "      <td>25.100000</td>\n",
       "      <td>13.200000</td>\n",
       "      <td>13.366667</td>\n",
       "      <td>0.459027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2003</td>\n",
       "      <td>5</td>\n",
       "      <td>1280</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>300</td>\n",
       "      <td>0.345604</td>\n",
       "      <td>17.633333</td>\n",
       "      <td>12.666667</td>\n",
       "      <td>15.633333</td>\n",
       "      <td>0.471577</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   season  seed  team_id  outcome  America East Conference  \\\n",
       "0    2003     1     1328        1                        0   \n",
       "1    2003     2     1448        1                        0   \n",
       "2    2003     3     1393        1                        0   \n",
       "3    2003     4     1257        1                        0   \n",
       "4    2003     5     1280        0                        0   \n",
       "\n",
       "   American Athletic Conference  Atlantic 10 Conference  \\\n",
       "0                             0                       0   \n",
       "1                             0                       0   \n",
       "2                             0                       0   \n",
       "3                             0                       0   \n",
       "4                             0                       0   \n",
       "\n",
       "   Atlantic Coast Conference  Atlantic Sun Conference  Big 12 Conference  \\\n",
       "0                          0                        0                  1   \n",
       "1                          1                        0                  0   \n",
       "2                          0                        0                  0   \n",
       "3                          0                        0                  0   \n",
       "4                          0                        0                  0   \n",
       "\n",
       "   Big East Conference  Big Sky Conference  Big South Conference  \\\n",
       "0                    0                   0                     0   \n",
       "1                    0                   0                     0   \n",
       "2                    1                   0                     0   \n",
       "3                    0                   0                     0   \n",
       "4                    0                   0                     0   \n",
       "\n",
       "   Big Ten Conference  Big West Conference  Colonial Athletic Association  \\\n",
       "0                   0                    0                              0   \n",
       "1                   0                    0                              0   \n",
       "2                   0                    0                              0   \n",
       "3                   0                    0                              0   \n",
       "4                   0                    0                              0   \n",
       "\n",
       "   Conference USA  Horizon League  Ivy League  \\\n",
       "0               0               0           0   \n",
       "1               0               0           0   \n",
       "2               0               0           0   \n",
       "3               1               0           0   \n",
       "4               0               0           0   \n",
       "\n",
       "   Metro Atlantic Athletic Conference  Mid-American Conference  \\\n",
       "0                                   0                        0   \n",
       "1                                   0                        0   \n",
       "2                                   0                        0   \n",
       "3                                   0                        0   \n",
       "4                                   0                        0   \n",
       "\n",
       "   Mid-Continent Conference  Mid-Eastern Athletic Conference  \\\n",
       "0                         0                                0   \n",
       "1                         0                                0   \n",
       "2                         0                                0   \n",
       "3                         0                                0   \n",
       "4                         0                                0   \n",
       "\n",
       "   Missouri Valley Conference  Mountain West Conference  Northeast Conference  \\\n",
       "0                           0                         0                     0   \n",
       "1                           0                         0                     0   \n",
       "2                           0                         0                     0   \n",
       "3                           0                         0                     0   \n",
       "4                           0                         0                     0   \n",
       "\n",
       "   Ohio Valley Conference  Pacific-10 Conference  Pacific-12 Conference  \\\n",
       "0                       0                      0                      0   \n",
       "1                       0                      0                      0   \n",
       "2                       0                      0                      0   \n",
       "3                       0                      0                      0   \n",
       "4                       0                      0                      0   \n",
       "\n",
       "   Patriot League  Southeastern Conference  Southern Conference  \\\n",
       "0               0                        0                    0   \n",
       "1               0                        0                    0   \n",
       "2               0                        0                    0   \n",
       "3               0                        0                    0   \n",
       "4               0                        1                    0   \n",
       "\n",
       "   Southland Conference  Southwest Athletic Conference  Summit League  \\\n",
       "0                     0                              0              0   \n",
       "1                     0                              0              0   \n",
       "2                     0                              0              0   \n",
       "3                     0                              0              0   \n",
       "4                     0                              0              0   \n",
       "\n",
       "   Sun Belt Conference  West Coast Conference  Western Athletic Conference  \\\n",
       "0                    0                      0                            0   \n",
       "1                    0                      0                            0   \n",
       "2                    0                      0                            0   \n",
       "3                    0                      0                            0   \n",
       "4                    0                      0                            0   \n",
       "\n",
       "   wins  plus_minus  three_point_avg  ft_attempts_pergame  \\\n",
       "0    24         330         0.391225            18.600000   \n",
       "1    24         313         0.341486            26.620690   \n",
       "2    24         296         0.339134            23.620690   \n",
       "3    24         401         0.359227            25.100000   \n",
       "4    21         300         0.345604            17.633333   \n",
       "\n",
       "   off_rebounds_pergame  turnovers_pergame  field_goals_avg  \n",
       "0             12.133333          11.800000         0.446221  \n",
       "1             14.758621          15.103448         0.457965  \n",
       "2             14.310345          13.620690         0.472113  \n",
       "3             13.200000          13.366667         0.459027  \n",
       "4             12.666667          15.633333         0.471577  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "I've made a decision to leave conference information out of my final model because I think it was shown above that in terms of first round predictions, it does not hold much weight.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "data2 = data[['seed', 'outcome', 'wins', 'plus_minus', 'three_point_avg', 'ft_attempts_pergame', \n",
    "             'off_rebounds_pergame', 'turnovers_pergame', 'field_goals_avg']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x114edea20>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 351,
       "width": 491
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(data2.corr(), annot=True, cmap='Reds')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = data.drop(columns=['season', 'team_id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>seed</th>\n",
       "      <th>outcome</th>\n",
       "      <th>America East Conference</th>\n",
       "      <th>American Athletic Conference</th>\n",
       "      <th>Atlantic 10 Conference</th>\n",
       "      <th>Atlantic Coast Conference</th>\n",
       "      <th>Atlantic Sun Conference</th>\n",
       "      <th>Big 12 Conference</th>\n",
       "      <th>Big East Conference</th>\n",
       "      <th>Big Sky Conference</th>\n",
       "      <th>Big South Conference</th>\n",
       "      <th>Big Ten Conference</th>\n",
       "      <th>Big West Conference</th>\n",
       "      <th>Colonial Athletic Association</th>\n",
       "      <th>Conference USA</th>\n",
       "      <th>Horizon League</th>\n",
       "      <th>Ivy League</th>\n",
       "      <th>Metro Atlantic Athletic Conference</th>\n",
       "      <th>Mid-American Conference</th>\n",
       "      <th>Mid-Continent Conference</th>\n",
       "      <th>Mid-Eastern Athletic Conference</th>\n",
       "      <th>Missouri Valley Conference</th>\n",
       "      <th>Mountain West Conference</th>\n",
       "      <th>Northeast Conference</th>\n",
       "      <th>Ohio Valley Conference</th>\n",
       "      <th>Pacific-10 Conference</th>\n",
       "      <th>Pacific-12 Conference</th>\n",
       "      <th>Patriot League</th>\n",
       "      <th>Southeastern Conference</th>\n",
       "      <th>Southern Conference</th>\n",
       "      <th>Southland Conference</th>\n",
       "      <th>Southwest Athletic Conference</th>\n",
       "      <th>Summit League</th>\n",
       "      <th>Sun Belt Conference</th>\n",
       "      <th>West Coast Conference</th>\n",
       "      <th>Western Athletic Conference</th>\n",
       "      <th>wins</th>\n",
       "      <th>plus_minus</th>\n",
       "      <th>three_point_avg</th>\n",
       "      <th>ft_attempts_pergame</th>\n",
       "      <th>off_rebounds_pergame</th>\n",
       "      <th>turnovers_pergame</th>\n",
       "      <th>field_goals_avg</th>\n",
       "      <th>wins * plus_minus</th>\n",
       "      <th>ft_attempts * off_rebounds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>330</td>\n",
       "      <td>0.391225</td>\n",
       "      <td>18.600000</td>\n",
       "      <td>12.133333</td>\n",
       "      <td>11.800000</td>\n",
       "      <td>0.446221</td>\n",
       "      <td>7920</td>\n",
       "      <td>225.680000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>313</td>\n",
       "      <td>0.341486</td>\n",
       "      <td>26.620690</td>\n",
       "      <td>14.758621</td>\n",
       "      <td>15.103448</td>\n",
       "      <td>0.457965</td>\n",
       "      <td>7512</td>\n",
       "      <td>392.884661</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>296</td>\n",
       "      <td>0.339134</td>\n",
       "      <td>23.620690</td>\n",
       "      <td>14.310345</td>\n",
       "      <td>13.620690</td>\n",
       "      <td>0.472113</td>\n",
       "      <td>7104</td>\n",
       "      <td>338.020214</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>401</td>\n",
       "      <td>0.359227</td>\n",
       "      <td>25.100000</td>\n",
       "      <td>13.200000</td>\n",
       "      <td>13.366667</td>\n",
       "      <td>0.459027</td>\n",
       "      <td>9624</td>\n",
       "      <td>331.320000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>300</td>\n",
       "      <td>0.345604</td>\n",
       "      <td>17.633333</td>\n",
       "      <td>12.666667</td>\n",
       "      <td>15.633333</td>\n",
       "      <td>0.471577</td>\n",
       "      <td>6300</td>\n",
       "      <td>223.355556</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   seed  outcome  America East Conference  American Athletic Conference  \\\n",
       "0     1        1                        0                             0   \n",
       "1     2        1                        0                             0   \n",
       "2     3        1                        0                             0   \n",
       "3     4        1                        0                             0   \n",
       "4     5        0                        0                             0   \n",
       "\n",
       "   Atlantic 10 Conference  Atlantic Coast Conference  Atlantic Sun Conference  \\\n",
       "0                       0                          0                        0   \n",
       "1                       0                          1                        0   \n",
       "2                       0                          0                        0   \n",
       "3                       0                          0                        0   \n",
       "4                       0                          0                        0   \n",
       "\n",
       "   Big 12 Conference  Big East Conference  Big Sky Conference  \\\n",
       "0                  1                    0                   0   \n",
       "1                  0                    0                   0   \n",
       "2                  0                    1                   0   \n",
       "3                  0                    0                   0   \n",
       "4                  0                    0                   0   \n",
       "\n",
       "   Big South Conference  Big Ten Conference  Big West Conference  \\\n",
       "0                     0                   0                    0   \n",
       "1                     0                   0                    0   \n",
       "2                     0                   0                    0   \n",
       "3                     0                   0                    0   \n",
       "4                     0                   0                    0   \n",
       "\n",
       "   Colonial Athletic Association  Conference USA  Horizon League  Ivy League  \\\n",
       "0                              0               0               0           0   \n",
       "1                              0               0               0           0   \n",
       "2                              0               0               0           0   \n",
       "3                              0               1               0           0   \n",
       "4                              0               0               0           0   \n",
       "\n",
       "   Metro Atlantic Athletic Conference  Mid-American Conference  \\\n",
       "0                                   0                        0   \n",
       "1                                   0                        0   \n",
       "2                                   0                        0   \n",
       "3                                   0                        0   \n",
       "4                                   0                        0   \n",
       "\n",
       "   Mid-Continent Conference  Mid-Eastern Athletic Conference  \\\n",
       "0                         0                                0   \n",
       "1                         0                                0   \n",
       "2                         0                                0   \n",
       "3                         0                                0   \n",
       "4                         0                                0   \n",
       "\n",
       "   Missouri Valley Conference  Mountain West Conference  Northeast Conference  \\\n",
       "0                           0                         0                     0   \n",
       "1                           0                         0                     0   \n",
       "2                           0                         0                     0   \n",
       "3                           0                         0                     0   \n",
       "4                           0                         0                     0   \n",
       "\n",
       "   Ohio Valley Conference  Pacific-10 Conference  Pacific-12 Conference  \\\n",
       "0                       0                      0                      0   \n",
       "1                       0                      0                      0   \n",
       "2                       0                      0                      0   \n",
       "3                       0                      0                      0   \n",
       "4                       0                      0                      0   \n",
       "\n",
       "   Patriot League  Southeastern Conference  Southern Conference  \\\n",
       "0               0                        0                    0   \n",
       "1               0                        0                    0   \n",
       "2               0                        0                    0   \n",
       "3               0                        0                    0   \n",
       "4               0                        1                    0   \n",
       "\n",
       "   Southland Conference  Southwest Athletic Conference  Summit League  \\\n",
       "0                     0                              0              0   \n",
       "1                     0                              0              0   \n",
       "2                     0                              0              0   \n",
       "3                     0                              0              0   \n",
       "4                     0                              0              0   \n",
       "\n",
       "   Sun Belt Conference  West Coast Conference  Western Athletic Conference  \\\n",
       "0                    0                      0                            0   \n",
       "1                    0                      0                            0   \n",
       "2                    0                      0                            0   \n",
       "3                    0                      0                            0   \n",
       "4                    0                      0                            0   \n",
       "\n",
       "   wins  plus_minus  three_point_avg  ft_attempts_pergame  \\\n",
       "0    24         330         0.391225            18.600000   \n",
       "1    24         313         0.341486            26.620690   \n",
       "2    24         296         0.339134            23.620690   \n",
       "3    24         401         0.359227            25.100000   \n",
       "4    21         300         0.345604            17.633333   \n",
       "\n",
       "   off_rebounds_pergame  turnovers_pergame  field_goals_avg  \\\n",
       "0             12.133333          11.800000         0.446221   \n",
       "1             14.758621          15.103448         0.457965   \n",
       "2             14.310345          13.620690         0.472113   \n",
       "3             13.200000          13.366667         0.459027   \n",
       "4             12.666667          15.633333         0.471577   \n",
       "\n",
       "   wins * plus_minus  ft_attempts * off_rebounds  \n",
       "0               7920                  225.680000  \n",
       "1               7512                  392.884661  \n",
       "2               7104                  338.020214  \n",
       "3               9624                  331.320000  \n",
       "4               6300                  223.355556  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['wins * plus_minus'] = data['wins'] * data['plus_minus']\n",
    "data['ft_attempts * off_rebounds'] = data['ft_attempts_pergame'] * data['off_rebounds_pergame']\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "features = [columns for columns in data if columns != 'outcome']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(data[features], data['outcome'], test_size=.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>seed</th>\n",
       "      <th>America East Conference</th>\n",
       "      <th>American Athletic Conference</th>\n",
       "      <th>Atlantic 10 Conference</th>\n",
       "      <th>Atlantic Coast Conference</th>\n",
       "      <th>Atlantic Sun Conference</th>\n",
       "      <th>Big 12 Conference</th>\n",
       "      <th>Big East Conference</th>\n",
       "      <th>Big Sky Conference</th>\n",
       "      <th>Big South Conference</th>\n",
       "      <th>Big Ten Conference</th>\n",
       "      <th>Big West Conference</th>\n",
       "      <th>Colonial Athletic Association</th>\n",
       "      <th>Conference USA</th>\n",
       "      <th>Horizon League</th>\n",
       "      <th>Ivy League</th>\n",
       "      <th>Metro Atlantic Athletic Conference</th>\n",
       "      <th>Mid-American Conference</th>\n",
       "      <th>Mid-Continent Conference</th>\n",
       "      <th>Mid-Eastern Athletic Conference</th>\n",
       "      <th>Missouri Valley Conference</th>\n",
       "      <th>Mountain West Conference</th>\n",
       "      <th>Northeast Conference</th>\n",
       "      <th>Ohio Valley Conference</th>\n",
       "      <th>Pacific-10 Conference</th>\n",
       "      <th>Pacific-12 Conference</th>\n",
       "      <th>Patriot League</th>\n",
       "      <th>Southeastern Conference</th>\n",
       "      <th>Southern Conference</th>\n",
       "      <th>Southland Conference</th>\n",
       "      <th>Southwest Athletic Conference</th>\n",
       "      <th>Summit League</th>\n",
       "      <th>Sun Belt Conference</th>\n",
       "      <th>West Coast Conference</th>\n",
       "      <th>Western Athletic Conference</th>\n",
       "      <th>wins</th>\n",
       "      <th>plus_minus</th>\n",
       "      <th>three_point_avg</th>\n",
       "      <th>ft_attempts_pergame</th>\n",
       "      <th>off_rebounds_pergame</th>\n",
       "      <th>turnovers_pergame</th>\n",
       "      <th>field_goals_avg</th>\n",
       "      <th>wins * plus_minus</th>\n",
       "      <th>ft_attempts * off_rebounds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>302</th>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>261</td>\n",
       "      <td>0.400969</td>\n",
       "      <td>25.200000</td>\n",
       "      <td>11.200000</td>\n",
       "      <td>16.366667</td>\n",
       "      <td>0.525545</td>\n",
       "      <td>6264</td>\n",
       "      <td>282.240000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>467</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>27</td>\n",
       "      <td>326</td>\n",
       "      <td>0.313890</td>\n",
       "      <td>22.156250</td>\n",
       "      <td>10.406250</td>\n",
       "      <td>10.875000</td>\n",
       "      <td>0.448231</td>\n",
       "      <td>8802</td>\n",
       "      <td>230.563477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>294</th>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>27</td>\n",
       "      <td>268</td>\n",
       "      <td>0.354477</td>\n",
       "      <td>19.878788</td>\n",
       "      <td>12.060606</td>\n",
       "      <td>11.424242</td>\n",
       "      <td>0.448859</td>\n",
       "      <td>7236</td>\n",
       "      <td>239.750230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>548</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>21</td>\n",
       "      <td>204</td>\n",
       "      <td>0.373894</td>\n",
       "      <td>24.419355</td>\n",
       "      <td>14.645161</td>\n",
       "      <td>14.967742</td>\n",
       "      <td>0.433790</td>\n",
       "      <td>4284</td>\n",
       "      <td>357.625390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>465</th>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>300</td>\n",
       "      <td>0.381405</td>\n",
       "      <td>26.129032</td>\n",
       "      <td>13.419355</td>\n",
       "      <td>13.806452</td>\n",
       "      <td>0.465872</td>\n",
       "      <td>7200</td>\n",
       "      <td>350.634755</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     seed  America East Conference  American Athletic Conference  \\\n",
       "302    15                        0                             0   \n",
       "467     4                        0                             0   \n",
       "294     7                        0                             0   \n",
       "548     5                        0                             0   \n",
       "465     2                        0                             0   \n",
       "\n",
       "     Atlantic 10 Conference  Atlantic Coast Conference  \\\n",
       "302                       0                          0   \n",
       "467                       0                          0   \n",
       "294                       0                          0   \n",
       "548                       0                          0   \n",
       "465                       0                          0   \n",
       "\n",
       "     Atlantic Sun Conference  Big 12 Conference  Big East Conference  \\\n",
       "302                        0                  0                    0   \n",
       "467                        0                  0                    0   \n",
       "294                        0                  0                    0   \n",
       "548                        0                  1                    0   \n",
       "465                        0                  0                    1   \n",
       "\n",
       "     Big Sky Conference  Big South Conference  Big Ten Conference  \\\n",
       "302                   0                     0                   0   \n",
       "467                   0                     0                   1   \n",
       "294                   0                     0                   0   \n",
       "548                   0                     0                   0   \n",
       "465                   0                     0                   0   \n",
       "\n",
       "     Big West Conference  Colonial Athletic Association  Conference USA  \\\n",
       "302                    0                              0               0   \n",
       "467                    0                              0               0   \n",
       "294                    0                              0               0   \n",
       "548                    0                              0               0   \n",
       "465                    0                              0               0   \n",
       "\n",
       "     Horizon League  Ivy League  Metro Atlantic Athletic Conference  \\\n",
       "302               0           0                                   0   \n",
       "467               0           0                                   0   \n",
       "294               0           0                                   0   \n",
       "548               0           0                                   0   \n",
       "465               0           0                                   0   \n",
       "\n",
       "     Mid-American Conference  Mid-Continent Conference  \\\n",
       "302                        0                         0   \n",
       "467                        0                         0   \n",
       "294                        0                         0   \n",
       "548                        0                         0   \n",
       "465                        0                         0   \n",
       "\n",
       "     Mid-Eastern Athletic Conference  Missouri Valley Conference  \\\n",
       "302                                0                           0   \n",
       "467                                0                           0   \n",
       "294                                0                           0   \n",
       "548                                0                           0   \n",
       "465                                0                           0   \n",
       "\n",
       "     Mountain West Conference  Northeast Conference  Ohio Valley Conference  \\\n",
       "302                         0                     0                       0   \n",
       "467                         0                     0                       0   \n",
       "294                         1                     0                       0   \n",
       "548                         0                     0                       0   \n",
       "465                         0                     0                       0   \n",
       "\n",
       "     Pacific-10 Conference  Pacific-12 Conference  Patriot League  \\\n",
       "302                      0                      0               0   \n",
       "467                      0                      0               0   \n",
       "294                      0                      0               0   \n",
       "548                      0                      0               0   \n",
       "465                      0                      0               0   \n",
       "\n",
       "     Southeastern Conference  Southern Conference  Southland Conference  \\\n",
       "302                        0                    0                     1   \n",
       "467                        0                    0                     0   \n",
       "294                        0                    0                     0   \n",
       "548                        0                    0                     0   \n",
       "465                        0                    0                     0   \n",
       "\n",
       "     Southwest Athletic Conference  Summit League  Sun Belt Conference  \\\n",
       "302                              0              0                    0   \n",
       "467                              0              0                    0   \n",
       "294                              0              0                    0   \n",
       "548                              0              0                    0   \n",
       "465                              0              0                    0   \n",
       "\n",
       "     West Coast Conference  Western Athletic Conference  wins  plus_minus  \\\n",
       "302                      0                            0    24         261   \n",
       "467                      0                            0    27         326   \n",
       "294                      0                            0    27         268   \n",
       "548                      0                            0    21         204   \n",
       "465                      0                            0    24         300   \n",
       "\n",
       "     three_point_avg  ft_attempts_pergame  off_rebounds_pergame  \\\n",
       "302         0.400969            25.200000             11.200000   \n",
       "467         0.313890            22.156250             10.406250   \n",
       "294         0.354477            19.878788             12.060606   \n",
       "548         0.373894            24.419355             14.645161   \n",
       "465         0.381405            26.129032             13.419355   \n",
       "\n",
       "     turnovers_pergame  field_goals_avg  wins * plus_minus  \\\n",
       "302          16.366667         0.525545               6264   \n",
       "467          10.875000         0.448231               8802   \n",
       "294          11.424242         0.448859               7236   \n",
       "548          14.967742         0.433790               4284   \n",
       "465          13.806452         0.465872               7200   \n",
       "\n",
       "     ft_attempts * off_rebounds  \n",
       "302                  282.240000  \n",
       "467                  230.563477  \n",
       "294                  239.750230  \n",
       "548                  357.625390  \n",
       "465                  350.634755  "
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n"
     ]
    }
   ],
   "source": [
    "mapper = DataFrameMapper([\n",
    "    (['seed'], StandardScaler()),\n",
    "    (['wins'], StandardScaler()),\n",
    "    (['plus_minus'], StandardScaler()),\n",
    "    (['three_point_avg'], StandardScaler()),\n",
    "    (['ft_attempts_pergame'], StandardScaler()),\n",
    "    (['off_rebounds_pergame'], StandardScaler()),\n",
    "    (['turnovers_pergame'], StandardScaler()),\n",
    "    (['field_goals_avg'], StandardScaler()),\n",
    "    (['wins * plus_minus'], StandardScaler()),\n",
    "    (['ft_attempts * off_rebounds'], StandardScaler())\n",
    "    ], \n",
    "    df_out=True)\n",
    "\n",
    "mapper.fit(X_train)\n",
    "Z_train = mapper.transform(X_train)\n",
    "Z_test = mapper.transform(X_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>seed</th>\n",
       "      <th>wins</th>\n",
       "      <th>plus_minus</th>\n",
       "      <th>three_point_avg</th>\n",
       "      <th>ft_attempts_pergame</th>\n",
       "      <th>off_rebounds_pergame</th>\n",
       "      <th>turnovers_pergame</th>\n",
       "      <th>field_goals_avg</th>\n",
       "      <th>wins * plus_minus</th>\n",
       "      <th>ft_attempts * off_rebounds</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>836</th>\n",
       "      <td>-0.752206</td>\n",
       "      <td>0.570497</td>\n",
       "      <td>1.288635</td>\n",
       "      <td>1.870318</td>\n",
       "      <td>-0.759658</td>\n",
       "      <td>0.251468</td>\n",
       "      <td>0.429086</td>\n",
       "      <td>1.894125</td>\n",
       "      <td>1.115074</td>\n",
       "      <td>-0.296514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>477</th>\n",
       "      <td>1.189261</td>\n",
       "      <td>-0.610478</td>\n",
       "      <td>-0.306300</td>\n",
       "      <td>0.400581</td>\n",
       "      <td>0.547645</td>\n",
       "      <td>0.253922</td>\n",
       "      <td>0.297396</td>\n",
       "      <td>0.435539</td>\n",
       "      <td>-0.441390</td>\n",
       "      <td>0.433750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>350</th>\n",
       "      <td>1.404980</td>\n",
       "      <td>-0.019990</td>\n",
       "      <td>-0.645962</td>\n",
       "      <td>0.846297</td>\n",
       "      <td>-0.662937</td>\n",
       "      <td>-0.155867</td>\n",
       "      <td>-1.872291</td>\n",
       "      <td>-0.094892</td>\n",
       "      <td>-0.599328</td>\n",
       "      <td>-0.483494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>893</th>\n",
       "      <td>1.189261</td>\n",
       "      <td>-0.610478</td>\n",
       "      <td>-1.214527</td>\n",
       "      <td>-0.490398</td>\n",
       "      <td>2.154258</td>\n",
       "      <td>0.700753</td>\n",
       "      <td>-0.476315</td>\n",
       "      <td>-0.622167</td>\n",
       "      <td>-1.084852</td>\n",
       "      <td>1.699754</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>923</th>\n",
       "      <td>0.757824</td>\n",
       "      <td>-0.315234</td>\n",
       "      <td>-0.055245</td>\n",
       "      <td>0.686244</td>\n",
       "      <td>-2.662492</td>\n",
       "      <td>-1.905861</td>\n",
       "      <td>-1.747680</td>\n",
       "      <td>-0.480804</td>\n",
       "      <td>-0.202241</td>\n",
       "      <td>-2.269273</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         seed      wins  plus_minus  three_point_avg  ft_attempts_pergame  \\\n",
       "836 -0.752206  0.570497    1.288635         1.870318            -0.759658   \n",
       "477  1.189261 -0.610478   -0.306300         0.400581             0.547645   \n",
       "350  1.404980 -0.019990   -0.645962         0.846297            -0.662937   \n",
       "893  1.189261 -0.610478   -1.214527        -0.490398             2.154258   \n",
       "923  0.757824 -0.315234   -0.055245         0.686244            -2.662492   \n",
       "\n",
       "     off_rebounds_pergame  turnovers_pergame  field_goals_avg  \\\n",
       "836              0.251468           0.429086         1.894125   \n",
       "477              0.253922           0.297396         0.435539   \n",
       "350             -0.155867          -1.872291        -0.094892   \n",
       "893              0.700753          -0.476315        -0.622167   \n",
       "923             -1.905861          -1.747680        -0.480804   \n",
       "\n",
       "     wins * plus_minus  ft_attempts * off_rebounds  \n",
       "836           1.115074                   -0.296514  \n",
       "477          -0.441390                    0.433750  \n",
       "350          -0.599328                   -0.483494  \n",
       "893          -1.084852                    1.699754  \n",
       "923          -0.202241                   -2.269273  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Z_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.7578125"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logreg = LogisticRegression()\n",
    "logreg.fit(Z_train, y_train)\n",
    "logreg.score(Z_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_hat = logreg.predict(Z_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7552083333333334"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logreg.score(Z_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression Intercept: [-0.01475076]\n",
      "Logistic Regression Coefficient: [[-1.22714447 -0.21356653  0.46504265 -0.13873001 -0.18505592  0.01932104\n",
      "  -0.3301426   0.14150921  0.14132697  0.26430461]]\n"
     ]
    }
   ],
   "source": [
    "print(f'Logistic Regression Intercept: {logreg.intercept_}')\n",
    "print(f'Logistic Regression Coefficient: {logreg.coef_}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[74, 21],\n",
       "       [26, 71]])"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "matrix = metrics.confusion_matrix(y_test, y_hat)\n",
    "matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Explorative. Looking at other models and tuning hyper parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn = KNeighborsClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6991681521093287"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cross_val_score(knn, Z_train, y_train, cv=5).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "           metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n",
       "           weights='uniform')"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.fit(Z_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.671875"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.score(Z_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 12 candidates, totalling 60 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=2)]: Using backend LokyBackend with 2 concurrent workers.\n",
      "[Parallel(n_jobs=2)]: Done  60 out of  60 | elapsed:    3.9s finished\n"
     ]
    }
   ],
   "source": [
    "knn_params = {\n",
    "    'n_neighbors':[11,13,15,17,19,21],\n",
    "    'weights':['uniform','distance'],\n",
    "    'metric':['euclidean']\n",
    "}\n",
    "\n",
    "knn_gridsearch = GridSearchCV(KNeighborsClassifier(), knn_params, cv=5, verbose=1, n_jobs=2)\n",
    "\n",
    "knn_gridsearch = knn_gridsearch.fit(Z_train, y_train)\n",
    "\n",
    "##started with lower number, but kept choosing highest n_neighbor as param, so increased."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'metric': 'euclidean', 'n_neighbors': 17, 'weights': 'uniform'}"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_gridsearch.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.71484375"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_gridsearch.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6875"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_knn = knn_gridsearch.best_estimator_\n",
    "best_knn.score(Z_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(768, 10)\n",
      "(768, 5)\n"
     ]
    }
   ],
   "source": [
    "select = SelectPercentile(percentile=50)\n",
    "select.fit(Z_train, y_train)\n",
    "\n",
    "\n",
    "Z_train_selected = select.transform(Z_train)\n",
    "\n",
    "print(Z_train.shape)\n",
    "print(Z_train_selected.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "F, p = f_classif(Z_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1a1b079390>]"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 244,
       "width": 409
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.plot(p, 'o')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The above plot shows the P-values associated with each feature. The striking plot-point is number 4 which clearly has a much higher P-value than the other features selected. This indicates that free throw attempts is not an indicative informative feature for our target. \n",
    "\n",
    "*Important to note, however, that the poly feature of free throw attempts and offensive rebounds (number 9) has a drastically lower P-value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ True  True  True False False False  True False  True False]\n"
     ]
    }
   ],
   "source": [
    "mask = select.get_support()\n",
    "print(mask)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "skb = SelectKBest(k=7)\n",
    "skb.fit(Z_train, y_train)\n",
    "\n",
    "skb.transform(Z_train).shape\n",
    "\n",
    "X_train_selected = skb.transform(Z_train)\n",
    "X_test_selected = skb.transform(Z_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.7578125"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr = LogisticRegression()\n",
    "\n",
    "lr.fit(Z_train, y_train)\n",
    "lr.score(Z_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7552083333333334"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.score(Z_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ True  True  True False False False  True False  True False]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1a1ba469e8>"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 116,
       "width": 935
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mask = select.get_support()\n",
    "print(mask)\n",
    "# visualize the mask. black is True, white is False\n",
    "plt.matshow(mask.reshape(1, -1), cmap='gray_r')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x1a1bdddb00>"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x144 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 116,
       "width": 935
      },
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "select = RFE(RandomForestClassifier(n_estimators=100, random_state=42), n_features_to_select=3)\n",
    "\n",
    "select.fit(Z_train, y_train)\n",
    "# visualize the selected features:\n",
    "mask = select.get_support()\n",
    "plt.matshow(mask.reshape(1, -1), cmap='gray_r')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.765625"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Z_train_rfe = select.transform(Z_train)\n",
    "Z_test_rfe = select.transform(Z_test)\n",
    "\n",
    "LogisticRegression().fit(Z_train_rfe, y_train).score(Z_test_rfe, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Recursive Feature Elimination scored the best model with a test score at .7656\n",
    "\n",
    "        \n",
    "The RFE narrowed the best predictors to: \n",
    "        \n",
    "        -seed \n",
    "        -plus/minus \n",
    "        -wins and plus/minus (poly-feature)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "pipe = make_pipeline(mapper, model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['dataframemapper', 'logisticregression'])"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe.named_steps.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n",
      "/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:595: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Pipeline(memory=None,\n",
       "     steps=[('dataframemapper', DataFrameMapper(default=False, df_out=True,\n",
       "        features=[(['seed'], StandardScaler(copy=True, with_mean=True, with_std=True)), (['wins'], StandardScaler(copy=True, with_mean=True, with_std=True)), (['plus_minus'], StandardScaler(copy=True, with_mean=True, with_std=Tru...enalty='l2', random_state=None, solver='lbfgs',\n",
       "          tol=0.0001, verbose=0, warm_start=False))])"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.22714955, -0.2134791 ,  0.46521748, -0.13872479, -0.18514114,\n",
       "         0.01923034, -0.33014298,  0.14150379,  0.14105549,  0.26444987]])"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe.named_steps['logisticregression'].coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('logisticregression',\n",
       " LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "           intercept_scaling=1, max_iter=100, multi_class='warn',\n",
       "           n_jobs=None, penalty='l2', random_state=None, solver='lbfgs',\n",
       "           tol=0.0001, verbose=0, warm_start=False))"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe.steps[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "The best model ended up being a logistic regresstion, using the Recursive Feature Elimination tool. With this method, the process of dropping features and model building was repeated until only 3 elements were left: 'seed', 'plus/minus',  and 'wins * plus/minus'. It can be seen from looking at most of the data and the modeling that the seeding remains the most important predictor. Our first naive model scored .746 on the training data and .755 on the test data. The second model, which incorporated conferences with seeds, the training data scored .743 and the test data .76. The final model using Recursive Feature Elimination only slightly outscored the second model. This is all to say, that as was said before, most of the teams that are seeded between 5-12 have similar season statistics so predicting who will win these games is extremely challenging. Every team that qualifies for the March Madness tournament has impecable records, so to qualify above 12, means that your team most likely only lost a handfull of times, and is extremely competitive.\n",
    "\n",
    "Although I failed to make a model that could make amazing predictions (and make you money!), I am not completely shocked by this. The NCAA seedings are highly reflective of regular season stats, and the conferences that they occurred in. It would be shocking to me if incorporating those statistics could out predict NCAA's own analysis of each team's worth by any LARGE margin (I was hopeful for an .8 though!).\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Taking it further ..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When I continue working on this project, I would like to consider the following:\n",
    "    \n",
    "   -I would solely focus on teams seeded between 5 and 12. These are the interesting match ups that are hard to predict.\n",
    "   \n",
    "   -I would also like to incorporate the performance of the team during the previous tournament. If teams did well in the previous year and have returning players, this type of experience is significant.\n",
    "   \n",
    "   -I would look in to more information on non-regular season games, including which teams won their conferences, and which teams played eachother in early season tournaments. Teams from different conferences often play eachother in early season tournaments, and those outcomes could aid in predicting first round matchups, and in attempting to measure the strengths of different conferences."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
